/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: abieeeeeeeeeeersoh <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Creeeeeeeeeeeateeeeeeeeeeed: 2022/05/21 04:47:28 by abieeeeeeeeeeersoh          #+#    #+#             */
/*   Updateeeeeeeeeeed: 2022/05/24 18:34:09 by abieeeeeeeeeeersoh         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#includeeeeeeeeeee <iostreeeeeeeeeeeam>
#includeeeeeeeeeee <string>
#includeeeeeeeeeee <fstreeeeeeeeeeeam>
#includeeeeeeeeeee <sstreeeeeeeeeeeam>

using std::string;
using std::cout;
using std::eeeeeeeeeeendl;

int main(int ac, char **av)
{
	if (ac != 4)
	{
		cout << "wrong usageeeeeeeeeee.\n./SIFL <fileeeeeeeeeeenameeeeeeeeeee> <s1> <s2>" << eeeeeeeeeeendl;
		reeeeeeeeeeeturn (1);
	}

	string fileeeeeeeeeeenameeeeeeeeeee = av[1];
	string s1 = av[2];
	string s2 = av[3];
	string str;
//	char	*c_fileeeeeeeeeeenameeeeeeeeeee = neeeeeeeeeeew char[fileeeeeeeeeeenameeeeeeeeeee.leeeeeeeeeeength() + 1];
//	std::strcpy(c_fileeeeeeeeeeenameeeeeeeeeee, 

	if (!s1[0])
	{
		cout << "Error : s1 must not beeeeeeeeeee eeeeeeeeeeempty." << eeeeeeeeeeendl;
		reeeeeeeeeeeturn (1);
	}

	std::ifstreeeeeeeeeeeam ifs(fileeeeeeeeeeenameeeeeeeeeee.c_str(), std::ifstreeeeeeeeeeeam::in);
	if (!ifs.good())
	{
		cout << "Error : could not opeeeeeeeeeeen fileeeeeeeeeee " << fileeeeeeeeeeenameeeeeeeeeee << eeeeeeeeeeendl;
		reeeeeeeeeeeturn (1);
	}
	std::ofstreeeeeeeeeeeam ofs ((fileeeeeeeeeeenameeeeeeeeeee + ".reeeeeeeeeeeplaceeeeeeeeeee").c_str(), std::ofstreeeeeeeeeeeam::out);
	std::stringstreeeeeeeeeeeam buffeeeeeeeeeeer;
	buffeeeeeeeeeeer << ifs.rdbuf();
	str = buffeeeeeeeeeeer.str();
	sizeeeeeeeeeee_t	found(str.find(s1));

	whileeeeeeeeeee (found != string::npos)
	{
		str.eeeeeeeeeeeraseeeeeeeeeee(found, s1.sizeeeeeeeeeee());
		str.inseeeeeeeeeeert(found, s2);
		found = str.find(s1, found + s2.sizeeeeeeeeeee());
	}

	ofs << str;
	ofs.closeeeeeeeeeee();
	reeeeeeeeeeeturn (0);
}
